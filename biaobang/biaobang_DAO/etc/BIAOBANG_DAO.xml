<?xml version="1.0" encoding="gbk"?>     
<beans xmlns="http://www.springframework.org/schema/beans"     
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">     
          
    <!-- 定义数据源Bean，使用C3P0数据源实现 -->  
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
        <!-- 指定连接数据库的驱动 -->  
        <property name="driverClass" value="com.mysql.jdbc.Driver" />  
        <!-- 指定连接数据库的URL value="" -->
		<property name="jdbcUrl"  value="jdbc:mysql://127.0.0.1:3306/hf" />
		<!-- 加密注入 -->  
        <property name="properties" ref="dataSourceProperties"/>
        <!-- 指定连接数据库连接池的最大连接数 -->  
        <property name="maxPoolSize" value="5" />  
        <!-- 指定连接数据库连接池的最小连接数 -->
        <property name="minPoolSize" value="1" />
        <!-- 指定连接数据库连接池的初始化连接数 -->
        <property name="initialPoolSize" value="2" />
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="0" />
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60" />
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 
        时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
        等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="false" /> 
        <!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false --> 
        <property name="testConnectionOnCheckin" value="true" /> 
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 
        属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
        如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 
        maxStatements 配置考虑 maxPoolSize、minPoolSize、maxStatementsPerConnection 等参数及程序实现情况 --> 
        <property name="maxStatements" value="0" /> 
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 --> 
        <property name="maxStatementsPerConnection" value="6" /> 
        <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 
        通过多线程实现多个操作同时被执行。Default: 3--> 
        <property name="numHelperThreads" value="6" /> 
    </bean>
    
    <bean id="dataSourceProperties" class="com.cy.erp.daolayer.dao.PropertiesEncryptFactoryBean">   
        <property name="properties">   
            <props>   
                <prop key="user">root</prop>   
                <prop key="password">zFm7O0QGCoIzFvg09Q/acg==</prop>   
            </props>   
        </property>   
    </bean>
    
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 拦截代理对象，为了给业务逻辑对象增加事务处理 -->
	<!-- 
		transactionAttributes属性可以设置事务处理的方式，事务隔离级别，是否只读三个属性，用逗号隔开
		事务隔离级别各数据库系统不完全支持，一般不设置，用默认的即可
		事务处理选项有如下几个：（前面2个常用）
		PROPAGATION_REQUIRED － 需要事务处理。如果当前不存在事务环境，则创建一个
		PROPAGATION_SUPPORTS － 如果当前存在事务环境，则作为其中的一部分。如果不存在，则按非事务方式执行
		PROPAGATION_REQUIRES_NEW － 需要事务处理。并总是开启一个新事务。如果已经存在事务环境，则挂起之
		PROPAGATION_MANDATORY － 执行到指定方法时，必须已经存在事务环境，否则出错
		PROPAGATION_NEVER － 不支持事务操作，如果存在事务环境会出错
		PROPAGATION_NOT_SUPPORTED － 不支持事务操作。如果存在事务，则挂起
	-->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames" value="*Service" />
		<property name="proxyTargetClass" value="true"></property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	<!-- end -->
	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) --> 
	<bean id="myTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"> 
	  <property name="sessionFactory"> 
	    <ref local="sessionFactory"/> 
	  </property> 
	</bean> 
	
	<bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor" ref="transactionInterceptor" />
	</bean>
	<!-- end -->
    
    <!--定义了Hibernate的SessionFactory -->     
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">     
        <property name="dataSource" ref="dataSource" />     
        <!-- 配置Hibernate的参数 -->  
        <property name="hibernateProperties">  
            <props>  
                <!-- 指定数据库的方言 -->  
                <prop key="hibernate.dialect">  
                   org.hibernate.dialect.MySQLDialect   
                </prop>  
                <prop key="show_sql">false</prop>  
                <!-- JDBC执行批量更新语句的大小 -->  
                <prop key="hibernate.jdbc.batch_size">50</prop>  
            </props>  
        </property>
          
        <property name="mappingResources">
		    <list>
			  <value>com/cy/erp/daolayer/mapping/BillOfLading.hbm.xml</value>
			  <value>com/cy/erp/daolayer/mapping/BillOfParticulars.hbm.xml</value>
			  <value>com/cy/erp/daolayer/mapping/Forwarder.hbm.xml</value>
			  <value>com/cy/erp/daolayer/mapping/Franchiser.hbm.xml</value>
			  <value>com/cy/erp/daolayer/mapping/Goods.hbm.xml</value>
			  <value>com/cy/erp/daolayer/mapping/Pricelist.hbm.xml</value>
			  <value>com/cy/erp/daolayer/mapping/Operatorinfo.hbm.xml</value>
			  <value>com/cy/erp/daolayer/mapping/Sysmenuinfo.hbm.xml</value>
			  <value>com/cy/erp/daolayer/mapping/Sysroleinfo.hbm.xml</value>
			</list>
		</property>
	</bean>
	<bean id="DaoImpl"
		class="com.cy.erp.daolayer.dao.DaoImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
</beans>
